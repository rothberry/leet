
[1mFrom:[0m /home/phil/dev/test/leet/ruby/valid_parentheses.rb @ line 16 Object#is_valid:

     [1;34m7[0m: [32mdef[0m [1;34mis_valid[0m(s)
     [1;34m8[0m:   [1;34m# valid if open branches must be closed by the same type of brackets[0m
     [1;34m9[0m:   [1;34m# valid if open branches must be closed in the correct order[0m
    [1;34m10[0m:   [1;34m# ? if s.length is odd, then skip and return 'false'[0m
    [1;34m11[0m:   [1;34m# Cannot start with close[0m
    [1;34m12[0m:   [1;34m# Cannot end with open[0m
    [1;34m13[0m:   str = s.split
    [1;34m14[0m:   p s_first = ([1;34;4mCHECK_PAR[0m[[1;34m0[0m]||[1;34;4mCHECK_PAR[0m[[1;34m2[0m]||[1;34;4mCHECK_PAR[0m[[1;34m4[0m]) == str.last
    [1;34m15[0m:   p s_last = ([1;34;4mCHECK_PAR[0m[[1;34m1[0m]||[1;34;4mCHECK_PAR[0m[[1;34m3[0m]||[1;34;4mCHECK_PAR[0m[[1;34m5[0m]) == str.first
 => [1;34m16[0m:   binding.pry
    [1;34m17[0m:   counter_1 = [1;34m0[0m
    [1;34m18[0m:   counter_2 = [1;34m0[0m
    [1;34m19[0m:   counter_3 = [1;34m0[0m
    [1;34m20[0m:   [32mif[0m s.length % [1;34m2[0m == [1;34m1[0m || s_first || s_last
    [1;34m21[0m:     [32mreturn[0m [1;36mfalse[0m 
    [1;34m22[0m:   [32melse[0m
    [1;34m23[0m: 
    [1;34m24[0m:     
    [1;34m25[0m:   [32mend[0m
    [1;34m26[0m: 
    [1;34m27[0m: [32mend[0m

